/*------------------------------------*\
    $WIDTHS
\*------------------------------------*/
/**
 * Sizes in human readable format. These are used in conjunction with other
 * objects and abstractions found in inuit.css, most commonly the grid system
 * and faux flexbox.
 *
 * We have a mixin to generate our widths and their breakpoint-specific
 * variations.
 */

@mixin grid-warning ($col) {
    @warn "#{$col} column grid is not allowed. Use 3, 4, 5, 6, 8, 10, 12 instead.";
}

@mixin grid-setup($namespace:"",$cols:12) {
    /**
    * Whole
    */
    .#{$namespace}one-whole         { width:100%; }


    /**
    * Halves
    */
    .#{$namespace}one-half          { width:50%; }


    /**
    * Thirds
    */
    @if $cols >= 3 {
        .#{$namespace}one-third         { width:33.333%; }
        .#{$namespace}two-thirds        { width:66.666%; }
    }

    /**
    * Quarters
    */
    @if $cols >= 4 {
        .#{$namespace}one-quarter       { width:25%; }
        .#{$namespace}two-quarters      { @extend .#{$namespace}one-half !optional; }
        .#{$namespace}three-quarters    { width:75%; }
    }


    /**
    * Fifths
    */
    @if $cols >= 5 {
        .#{$namespace}one-fifth         { width:20%; }
        .#{$namespace}two-fifths        { width:40%; }
        .#{$namespace}three-fifths      { width:60%; }
        .#{$namespace}four-fifths       { width:80%; }
    }

    /**
    * Sixths
    */
    @if $cols >= 6 {
        .#{$namespace}one-sixth         { width:16.666%; }
        .#{$namespace}two-sixths        { @extend .#{$namespace}one-third !optional; }
        .#{$namespace}three-sixths      { @extend .#{$namespace}one-half !optional; }
        .#{$namespace}four-sixths       { @extend .#{$namespace}two-thirds !optional; }
        .#{$namespace}five-sixths       { width:83.333%; }
    }

    @if $cols == 7 {
        @include grid-warning(7);
    }

    /**
    * Eighths
    */
    @if $cols >= 8 {
        .#{$namespace}one-eighth        { width:12.5%; }
        .#{$namespace}two-eighths       { @extend .#{$namespace}one-quarter !optional; }
        .#{$namespace}three-eighths     { width:37.5%; }
        .#{$namespace}four-eighths      { @extend .#{$namespace}one-half !optional; }
        .#{$namespace}five-eighths      { width:62.5%; }
        .#{$namespace}six-eighths       { @extend .#{$namespace}three-quarters !optional; }
        .#{$namespace}seven-eighths     { width:87.5%; }
    }

    @if $cols == 9 {
        @include grid-warning(9);
    }

    /**
    * Tenths
    */
    @if $cols >= 10 {
        .#{$namespace}one-tenth         { width:10%; }
        .#{$namespace}two-tenths        { @extend .#{$namespace}one-fifth !optional; }
        .#{$namespace}three-tenths      { width:30%; }
        .#{$namespace}four-tenths       { @extend .#{$namespace}two-fifths !optional; }
        .#{$namespace}five-tenths       { @extend .#{$namespace}one-half !optional; }
        .#{$namespace}six-tenths        { @extend .#{$namespace}three-fifths !optional; }
        .#{$namespace}seven-tenths      { width:70%; }
        .#{$namespace}eight-tenths      { @extend .#{$namespace}four-fifths !optional; }
        .#{$namespace}nine-tenths       { width:90%; }
    }

    @if $cols == 11 {
        @include grid-warning(11);
    }

    /**
    * Twelfths
    */
    @if $cols > 12 {
        .#{$namespace}one-twelfth       { width:8.333%; }
        .#{$namespace}two-twelfths      { @extend .#{$namespace}one-sixth !optional; }
        .#{$namespace}three-twelfths    { @extend .#{$namespace}one-quarter !optional; }
        .#{$namespace}four-twelfths     { @extend .#{$namespace}one-third !optional; }
        .#{$namespace}five-twelfths     { width:41.666% }
        .#{$namespace}six-twelfths      { @extend .#{$namespace}one-half !optional; }
        .#{$namespace}seven-twelfths    { width:58.333%; }
        .#{$namespace}eight-twelfths    { @extend .#{$namespace}two-thirds !optional; }
        .#{$namespace}nine-twelfths     { @extend .#{$namespace}three-quarters !optional; }
        .#{$namespace}ten-twelfths      { @extend .#{$namespace}five-sixths !optional; }
        .#{$namespace}eleven-twelfths   { width:91.666%; }
    }
}

@include grid-setup();



/**
 * If you have set `$responsive` to ‘true’ in `_vars.scss` then you now have
 * access to these classes. You can define at which breakpoint you’d like an
 * element to be a certain size, e.g.:
 *
 * `<div class="g  one-quarter  lap-one-half  palm-one-whole"> ... </div>`
 *
 * This would create a `div` that, at ‘desktop’ sizes, takes up a quarter of the
 * horizontal space, a half of that space at ‘tablet’ sizes, and goes full width
 * at ‘mobile’ sizes.
 *
 * Demo: jsfiddle.net/inuitcss/WS4Ge
 *
 */

@if $responsive == true{

    @include media-query(palm){
        @include grid-setup("palm-");
    }

    @include media-query(lap){
        @include grid-setup("lap-");
    }

    @include media-query(lap-and-up){
        @include grid-setup("lap-and-up-");
    }

    @include media-query(portable){
        @include grid-setup("portable-");
    }

    @include media-query(desk){
        @include grid-setup("desk-");
    }


    /**
     * If you have set the additional `$responsive-extra` variable to ‘true’ in
     * `_vars.scss` then you now have access to the following class available to
     * accomodate much larger screen resolutions.
     */

    @if $responsive-extra == true{

        @include media-query(desk-wide){
            @include grid-setup("desk-wide-");
        }

    }

} /* endif */
