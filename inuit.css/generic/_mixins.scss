/*------------------------------------*\
    $MIXINS
\*------------------------------------*/
/**
 * Create a fully formed type style (sizing and vertical rhythm) by passing in a
 * single value, e.g.:
 * 
   `@include font-size(10);`
 * 
 * Thanks to @redclov3r for the `line-height` Sass:
 * twitter.com/redclov3r/status/250301539321798657
 */
@mixin font-size($font-size){
    font-size:$font-size +px;
    font-size:$font-size / $base-font-size +rem;
    line-height:ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
}


/**
 * Create vendor-prefixed CSS in one go, e.g.
 * 
   `@include vendor(border-radius, 4px);`
 * 
 */
@mixin vendor($property, $value){
    -webkit-#{$property}:$value;
       -moz-#{$property}:$value;
        -ms-#{$property}:$value;
         -o-#{$property}:$value;
            #{$property}:$value;
}


/**
 * Create CSS keyframe animations for all vendors in one go, e.g.:
 * 
   .foo{
       @include vendor(animation, shrink 3s);
   }
   
   @include keyframe(shrink){
       from{
           font-size:5em;
       }
   }
 * 
 * Courtesy of @integralist: twitter.com/integralist/status/260484115315437569
 */
@mixin keyframe ($animation-name){
    @-webkit-keyframes $animation-name{
        @content;
    }
    
    @-moz-keyframes $animation-name{
        @content;
    }
    
    @-ms-keyframes $animation-name{
        @content;
    }
    
    @-o-keyframes $animation-name{
        @content;
    }
    
    @keyframes $animation-name{
        @content;
    }
}


/**
 * Force overly long spans of text to truncate, e.g.:
 * 
   `@include truncate(100%);`
 * 
 * Where `$truncation-boundary` is a united measurement.
 */
@mixin truncate($truncation-boundary){
    max-width:$truncation-boundary;
    white-space:nowrap;
    overflow:hidden;
    text-overflow:ellipsis;
}


/**
 * CSS arrows!!! But... before you read on, you might want to grab a coffee...
 * 
 * This mixin creates a CSS arrow on a given element. We can have the arrow
 * appear in one of 12 locations, thus:
 * 
 *       01    02    03
 *    +------------------+
 * 12 |                  | 04
 *    |                  |
 * 11 |                  | 05
 *    |                  |
 * 10 |                  | 06
 *    +------------------+
 *       09    08    07
 * 
 * You pass this position in along with a desired arrow color and optional
 * border color, for example:
 * 
 * `@include arrow(top, left, red)`
 * 
 * for just a single, red arrow, or:
 * 
 * `@include arrow(bottom, center, red, black)`
 * 
 * which will create a red triangle with a black border which sits at the bottom
 * center of the element. Call the mixin thus: 
 * 
   .foo{
       background-color:#BADA55;
       border:1px solid #ACE;
       @include arrow(top, left, #BADA55, #ACE);
   }
 * 
 */
@mixin arrow($arrow-edge, $arrow-location, $arrow-color, $border-color: $arrow-color){
    
    @if $arrow-edge == top{
        
        @extend %arrow--top;
        
        &:before{
            border-bottom-color:$border-color;
        }
        
        &:after{
            border-bottom-color:$arrow-color;
        }
        
        @if $arrow-location == left{
            @extend %arrow--left;
        }
        
        @if $arrow-location == center{
            @extend %arrow--center;
        }
        
        @if $arrow-location == right{
            @extend %arrow--right;
        }
        
    }
        
    @if $arrow-edge == right{
        
        @extend %arrow--far;
        
        &:before{
            border-left-color:$border-color;
        }
        
        &:after{
            border-left-color:$arrow-color;
        }
        
        @if $arrow-location == top{
            @extend %arrow--upper;
        }
        
        @if $arrow-location == center{
            @extend %arrow--middle;
        }
        
        @if $arrow-location == bottom{
            @extend %arrow--lower;
        }
        
    }
    
    @if $arrow-edge == bottom{
        
        @extend %arrow--bottom;
        
        &:before{
            border-top-color:$border-color;
        }
        
        &:after{
            border-top-color:$arrow-color;
        }
        
        @if $arrow-location == left{
            @extend %arrow--left;
        }
        
        @if $arrow-location == center{
            @extend %arrow--center;
        }
        
        @if $arrow-location == right{
            @extend %arrow--right;
        }
        
    }
    
    @if $arrow-edge == left{
        
        @extend %arrow--near;
        
        &:before{
            border-right-color:$border-color;
        }
        
        &:after{
            border-right-color:$arrow-color;
        }
        
        @if $arrow-location == top{
            @extend %arrow--upper;
        }
        
        @if $arrow-location == center{
            @extend %arrow--middle;
        }
        
        @if $arrow-location == bottom{
            @extend %arrow--lower;
        }
        
    }
    
}


/**
 * Media query mixin.
 *
 * It’s not great practice to define solid breakpoints up-front, preferring to
 * modify your design when it needs it, rather than assuming you’ll want a
 * change at ‘mobile’. However, as inuit.css is required to take a hands off
 * approach to design decisions, this is the closest we can get to baked-in
 * responsiveness. It’s flexible enough to allow you to set your own breakpoints
 * but solid enough to be frameworkified.
 * 
 * We define some broad breakpoints  in our vars file that are picked up here
 * for use in a simple media query mixin. Our options are:
 *
 * mobile-only
 * tablet-only
 * all-handheld
 * desktop-only
 * 
 * `@include media-query($mobile-only){ [styles here] }`
 * 
 * The mixin interprets the variables with min-width as default.
 */
$mq-default-feature: min-width !default;

@function mq-concatenate($query-string, $new-value, $feature: $mq-default-feature){
    $new-string: "";
    @if $feature != false{
        $new-string: #{$query-string}unquote("and (#{$feature}:  #{$new-value}) ");
    }
    @else{
        $new-string: #{$query-string}unquote("and (#{$new-value}) ");
    }
    @return $new-string;
}

@mixin media-query($breakpoint, $media: "screen"){
    $query-string: "#{$media} ";
    @if type-of($breakpoint) == number{
        $query-string: mq-concatenate($query-string, $breakpoint);
    }
    @if type-of($breakpoint) == string{
        $query-string: mq-concatenate($query-string, $breakpoint, false);
    }
    @else if type-of($breakpoint) == list{
        @if type-of(nth($breakpoint, 1)) == number and type-of(nth($breakpoint, 2)) == number{
            $query-string: mq-concatenate($query-string, nth($breakpoint, 1), "min-width");
            $query-string: mq-concatenate($query-string, nth($breakpoint, 2), "max-width");
        }
        @else if type-of(nth($breakpoint, 1)) == string{
            $query-string: mq-concatenate($query-string, nth($breakpoint, 2), nth($breakpoint, 1));
        }
        @else if type-of(nth($breakpoint, 1)) == list{
            @each $item in $breakpoint{
                @if type-of($item) == list{
                    $query-string: mq-concatenate($query-string, nth($item, 2), nth($item, 1));
                }
                @else{
                    $query-string: mq-concatenate($query-string, $item, false);
                }
            }
        }
    }
    @media #{$query-string}{
        @content;
    }
}
