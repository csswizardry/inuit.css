/*------------------------------------*\
    $HELPER
\*------------------------------------*/
/**
 * A series of helper classes to use arbitrarily. Only use a helper class if an
 * element/component doesn’t already have a class to which you could apply this
 * styling, e.g. if you need to float `.main-nav` left then add `float:left;` to
 * that ruleset as opposed to adding the `.float--left` class to the markup.
 *
 * A lot of these classes carry `!important` as you will always want them to win
 * out over other selectors.
 */
.float--right   { float:right!important; }
.float--left    { float:left !important; }

.text--left     { text-align:left  !important; }
.text--center   { text-align:center!important; }
.text--right    { text-align:right !important; }

.flush          { margin:       0!important; }
.flush--top     { margin-top:   0!important; }
.flush--right   { margin-right: 0!important; }
.flush--bottom  { margin-bottom:0!important; }
.flush--left    { margin-left:  0!important; }
.flush--ends    { margin-top:   0!important; margin-bottom:0!important; }
.flush--sides   { margin-right: 0!important; margin-left:  0!important; }


/**
 * Pull items full width of `.island` parents.
 */
.full-bleed{
    margin-right:-$base-spacing-unit!important;
    margin-left: -$base-spacing-unit!important;

    .islet &{
        margin-right:-($half-spacing-unit)!important;
        margin-left: -($half-spacing-unit)!important;
    }
}


/**
 * Add a help cursor to any element that gives the user extra information on
 * `:hover`.
 */
.informative{
    cursor:help;
}


/**
 * Mute an object by reducing its opacity.
 */
.muted{
    opacity:0.5;
    filter:alpha(opacity = 50);
}


/**
 * Align items to the right where they imply progression/movement forward, e.g.:
 *
   <p class=proceed><a href=#>Read more...</a></p>
 *
 */
.proceed{
    text-align:right;
}


/**
 * Add a right-angled quote to links that imply movement, e.g.:
 *
   <a href=# class=go>Read more</a>
 *
 */
.go:after{
    content:" »";
}


/**
 * Apply capital case to an element (usually a `strong`).
 */
.caps{
    text-transform:uppercase;
}


/**
 * Hide content off-screen without resorting to `display:none;`
 */
.accessibility              { position:absolute; left:-99999px; }
[dir=rtl] .accessibility    { left:auto; right:-99999px; }


/**
 * Hide content based on breakpoint
 */
.hide{
    position:absolute;
    left:-9999px;
}
@each $state in palm, lap, lap-and-up, portable, desk, desk-wide{
    @include media-query(#{$state}){
        .hide--#{$state}{
            position:absolute;
            left:-9999px;
        }
    }
}
